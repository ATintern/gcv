'use strict';var Alignment=Alignment||{};Alignment._computeScore=function(a,b,accessor,scores){a=accessor(a);b=accessor(b);if(a===b&&a!=''){return scores.match}return scores.mismatch};Alignment.smithWaterman=function(sequence,reference,options){var align=function align(seq,ref){var rows=ref.length+1,cols=seq.length+1,a=Array.matrix(rows,cols,0);var i=0,j=0;var choice=[0,0,0,0];var max=0,iMax=0,jMax=0;for(i=1;i<rows;i++){for(j=1;j<cols;j++){choice[0]=0;choice[1]=a[i-1][j-1]+Alignment._computeScore(ref[i-1],seq[j-1],options.accessor,options.scores);choice[2]=a[i-1][j]+options.scores.gap;choice[3]=a[i][j-1]+options.scores.gap;a[i][j]=choice.max();if(a[i][j]>=max){max=a[i][j];iMax=i;jMax=j}}}i=iMax;j=jMax;var diag,up,left,score=max,outRef=[],outSeq=[];while(i>0&&j>0){score=a[i][j];if(score==0){break}diag=a[i-1][j-1];up=a[i][j-1];left=a[i-1][j];if(score==diag+Alignment._computeScore(ref[i-1],seq[j-1],options.accessor,options.scores)){outRef.unshift(clone(ref[i-1]));outSeq.unshift(clone(seq[j-1]));i-=1;j-=1}else if(score==left+options.scores.gap){outRef.unshift(clone(ref[i-1]));outSeq.unshift(null);i-=1}else if(score==up+options.scores.gap){outRef.unshift(null);outSeq.unshift(clone(seq[j-1]));j-=1}else{break}}while(j>0){outRef.unshift(null);outSeq.unshift(clone(seq[j-1]));j-=1}return{sequence:outSeq,reference:outRef,score:max}};var options=options||{};options.accessor=options.accessor||function(e){return e};options.scores=options.scores||{};options.scores.match=options.scores.match||5;options.scores.mismatch=options.scores.mismath=0;options.scores.gap=options.scores.gap||-1;var forward=align(sequence,reference),reverseReference=reference.slice(0);reverseReference.reverse();var reverse=align(sequence,reverseReference);var output;if(forward.score>=reverse.score){output=forward}else{for(var i=0;i<reverse.reference.length;i++){if(reverse.reference[i]!=null){reverse.reference[i].strand=-reverse.reference[i].strand}}output=reverse}return[output]};Alignment.repeat=function(sequence,reference,options){var align=function align(seq,ref){var rows=seq.length+1,cols=ref.length+1,a=Array.matrix(cols,rows,0);var i;var choice=[0,0,0,0];for(i=1;i<cols;i++){var scores=a[i-1].map(function(score,j){return j>0?score-options.scores.threshold:score});a[i][0]=scores.max();for(j=1;j<rows;j++){choice[0]=a[i][0];choice[1]=a[i-1][j-1]+Alignment._computeScore(ref[i-1],seq[j-1],options.accessor,options.scores);choice[2]=a[i-1][j]+options.scores.gap;choice[3]=a[i][j-1]+options.scores.gap;a[i][j]=choice.max()}}var str='';for(j=0;j<rows;j++){for(i=0;i<cols;i++){str+='\t'+a[i][j].toString()}str+='\n'}i=cols-1;var j=0,alignments=[],index=-1,saving=false,length=0;while(!(i==0&&j==0)){if(j==0){if(saving&&length<2){alignments.pop();index--;length=0}saving=false;var max=a[i].max();var jMax=a[i].lastIndexOf(max);if(jMax>0&&i>0&&options.accessor(ref[i-1])===options.accessor(seq[jMax-1])&&max>=options.scores.threshold){length=1;saving=true;j=jMax;alignments.push({sequence:[],reference:[],score:max});index++;for(var k=seq.length-1;k>=j;k--){alignments[index].sequence.unshift(clone(seq[k]));alignments[index].reference.unshift(null)}alignments[index].sequence.unshift(clone(seq[j-1]));alignments[index].reference.unshift(clone(ref[i-1]));if(options.suffixScores)alignments[index].reference[0].suffixScore=a[i][j]}else{i--}}else if(i==0){j=0}else{var scores=[a[i-1][j-1],a[i][j-1],a[i-1][j]];var max=scores.max();if(max==0){if(saving){for(var k=j-1;k>0;k--){alignments[index].sequence.unshift(clone(seq[k-1]));alignments[index].reference.unshift(null)}}i--;j=0}else{switch(scores.lastIndexOf(max)){case 0:j--;i--;if(saving&&j>0&&i>0){alignments[index].sequence.unshift(clone(seq[j-1]));alignments[index].reference.unshift(clone(ref[i-1]));if(options.suffixScores)alignments[index].reference[0].suffixScore=a[i][j];length++}break;case 1:j--;if(saving&&j>0){alignments[index].sequence.unshift(clone(seq[j-1]));alignments[index].reference.unshift(null)}break;case 2:i--;if(saving&&i>0){alignments[index].sequence.unshift(null);alignments[index].reference.unshift(clone(ref[i-1]));if(options.suffixScores)alignments[index].reference[0].suffixScore=a[i][j]}break;}}}}if(saving&&length<2){alignments.pop();index--;length=0}return alignments};var options=options||{};options.accessor=options.accessor||function(e){return e};options.scores=options.scores||{};options.scores.match=options.scores.match||5;options.scores.mismatch=options.scores.mismath=0;options.scores.gap=options.scores.gap||-1;options.scores.threshold=options.scores.threshold||10;options.suffixScores=options.suffixScores||false;var forwards=align(sequence,reference),reverseReference=reference.slice(0);reverseReference.reverse();var reverses=align(sequence,reverseReference);var output=forwards;for(var i=0;i<reverses.length;i++){var a=reverses[i];for(var j=0;j<a.reference.length;j++){if(a.reference[j]!=null){a.reference[j].strand=-a.reference[j].strand}}output.push(a)}return output};Alignment.trackify=function(data,alignments){var aligned=$.extend(true,{},data),query=aligned.groups[0];if(query!==undefined){aligned.groups=[query];var length=query.genes.length;for(var k=0;k<alignments.length;k++){var queryCount=0,preQuery=0,insertionCount=0,alignment=alignments[k],track=alignment.track;track.score=alignment.score;track.genes=[];for(var i=0;i<alignment.sequence.length;i++){if(alignment.sequence[i]==null&&queryCount==0){preQuery++}else if(alignment.sequence[i]==null){if(queryCount>=length){alignment.reference[i].x=queryCount++;alignment.reference[i].y=0;track.genes.push(alignment.reference[i])}else{insertionCount++}}else if(alignment.reference[i]==null){queryCount++}else{if(preQuery>0){for(var j=0;j<preQuery;j++){alignment.reference[j].x=-(preQuery-(j+1));alignment.reference[j].y=0;track.genes.push(alignment.reference[j])}preQuery=0}else if(insertionCount>0){var step=1/(insertionCount+1);for(var j=i-insertionCount;j<i;j++){if(alignment.reference[j]!=null){alignment.reference[j].x=queryCount+step*(i-j)-1;alignment.reference[j].y=0;track.genes.push(alignment.reference[j])}}insertionCount=0}alignment.reference[i].x=queryCount++;alignment.reference[i].y=0;track.genes.push(alignment.reference[i])}}aligned.groups.push(track)}}return aligned};

